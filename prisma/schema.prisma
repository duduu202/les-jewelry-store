// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  payment_card PaymentCard[]
  address      Address[]
  //coupon     Coupon?
  //order     Order?

  name     String
  CPF      String?
  email    String   @unique
  password String   @default("")
  phone    String   @default("")
  role     UserRole @default(Customer)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  coupons    Coupon[]

  @@map("users")
}

model Address {
  id String @id @default(uuid())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart    Cart[]

  street   String
  number   String
  district String
  city     String
  state    String
  zip_code String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id String @id @default(uuid())

  price       Float
  stock       Int
  name        String
  description String
  image       String?

  cart_items CartItems[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("products")
}

// many products to many carts
model CartItems {
  id String @id @default(uuid())

  cart_id String
  cart    Cart   @relation(fields: [cart_id], references: [id], onDelete: Cascade)

  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([cart_id, product_id])
  @@map("cart_items")
}

// many PaymentCard to many Carts
model CartPaymentCard {
  id String @id @default(uuid())

  cart_id String? @unique
  cart    Cart?   @relation(fields: [cart_id], references: [id])

  payment_card_id String?
  payment_card    PaymentCard? @relation(fields: [payment_card_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([cart_id, payment_card_id])
  @@map("cart_payment_cards")
}

model CartCoupon {
  id String @id @default(uuid())

  cart_id String? @unique
  cart    Cart?   @relation(fields: [cart_id], references: [id])

  coupon_id String?
  coupon    Coupon? @relation(fields: [coupon_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([cart_id, coupon_id])
  @@map("cart_coupons")
}

model Cart {
  id      String @id @default(uuid())
  user_id String

  is_current Boolean @default(false)

  // many to many
  cart_items         CartItems[]
  cart_payment_cards CartPaymentCard[]

  cart_coupons CartCoupon[]
  status       Cart_status @default(EM_PROCESSAMENTO)
  paid_status  Paid_status @default(NOT_PAID)
  address_id   String?
  address      Address?    @relation(fields: [address_id], references: [id])
  delivery_fee Float       @default(0)
    is_default Boolean @default(false)

  expires_at DateTime?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  @@map("carts")
}

enum Paid_status {
  PAID
  NOT_PAID
  REFUNDED
  EXPIRED
}

enum Cart_status {
  EM_PROCESSAMENTO
  EM_TRANSITO
  ENTREGUE
  EM_TROCA
  TROCA_AUTORIZADA
  REPROVADA
  APROVADA
}

model Coupon {
  id String @id @default(uuid())

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  type Coupon_type @default(discount)

  code       String
  quantity   Int          @default(1)
  discount   Float
  expires_at DateTime?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  cart_coupons CartCoupon[]

  @@map("coupons")
}

model PaymentCard {
  id String @id @default(uuid())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // the card id in the payment gateway
  external_id String

  first_four_digits String
  last_four_digits  String
  brand             String
  holder_name       String

  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  cart_payment_cards CartPaymentCard[]

  @@map("payment_cards")
}

enum Coupon_type {
  exchange
  discount
}

//model Purchase {
//  id              String         @id @default(uuid())
//
//  user_id    String?   @unique
//  user       User?     @relation(fields: [user_id], references: [id])
//
//  product_id String?   @unique
//  product    Product?  @relation(fields: [product_id], references: [id])
//
//  created_at      DateTime       @default(now())
//  updated_at      DateTime       @updatedAt
//
//  @@map("purchases")
//}

//model Order {
//  id              String         @id @default(uuid())
//
//  status_history  Status[]
//
//  user_id    String?   @unique
//  user       User?     @relation(fields: [user_id], references: [id])
//
//  product_id String?   @unique
//  product    Product?  @relation(fields: [product_id], references: [id])
//
//  created_at      DateTime       @default(now())
//  updated_at      DateTime       @updatedAt
//
//  @@map("orders")
//}

//model Status {
//  id              String         @id @default(uuid())
//  order_id    String?   @unique
//  order       Order?     @relation(fields: [order_id], references: [id])
//
//  name          Status_type @default(Processing)
//  created_at      DateTime       @default(now())
//  updated_at      DateTime       @updatedAt
//
//  @@map("status")
//}

//enum Status_type {
//  Processing
//  In_transit
//  Delivered
//}
//
//model Coupon {
//  id              String         @id @default(uuid())
//
//  user_id    String?   @unique
//  user       User?     @relation(fields: [user_id], references: [id])
//
//  code            String
//  discount        Float
//  available_until DateTime
//  created_at      DateTime       @default(now())
//  updated_at      DateTime       @updatedAt
//
//  @@map("coupons")
//}

enum UserRole {
  Master
  Customer
}
